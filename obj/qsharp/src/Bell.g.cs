// <auto-generated>
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Bell\",\"Name\":\"Set\"},\"Attributes\":[],\"SourceFile\":\"/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs\",\"Position\":{\"Item1\":6,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":14}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"desired\"]},\"Type\":{\"Case\":\"Result\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":15},\"Item2\":{\"Line\":1,\"Column\":22}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"q1\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":33},\"Item2\":{\"Line\":1,\"Column\":35}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Result\"},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Bell\",\"Name\":\"Set\"},\"Attributes\":[],\"SourceFile\":\"/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs\",\"Position\":{\"Item1\":6,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":14}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Bell\",\"Name\":\"SetToBellState\"},\"Attributes\":[],\"SourceFile\":\"/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs\",\"Position\":{\"Item1\":65,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"q0\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":26},\"Item2\":{\"Line\":1,\"Column\":28}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"q1\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":38},\"Item2\":{\"Line\":1,\"Column\":40}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Bell\",\"Name\":\"SetToBellState\"},\"Attributes\":[],\"SourceFile\":\"/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs\",\"Position\":{\"Item1\":65,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Bell\",\"Name\":\"Rand3\"},\"Attributes\":[],\"SourceFile\":\"/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs\",\"Position\":{\"Item1\":75,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":16}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Bell\",\"Name\":\"Rand3\"},\"Attributes\":[],\"SourceFile\":\"/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs\",\"Position\":{\"Item1\":75,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":16}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Bell\",\"Name\":\"BellTheorem\"},\"Attributes\":[],\"SourceFile\":\"/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs\",\"Position\":{\"Item1\":98,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"iterations\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":23},\"Item2\":{\"Line\":1,\"Column\":33}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Int\"},\"ReturnType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Bell\",\"Name\":\"BellTheorem\"},\"Attributes\":[],\"SourceFile\":\"/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs\",\"Position\":{\"Item1\":98,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"Documentation\":[]}")]
#line hidden
namespace Bell
{
    [SourceLocation("/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs", OperationFunctor.Body, 7, 66)]
    public partial class Set : Operation<(Result,Qubit), QVoid>, ICallable
    {
        public Set(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Result,Qubit)>, IApplyData
        {
            public In((Result,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    yield return Data.Item2;
                }
            }
        }

        String ICallable.Name => "Set";
        String ICallable.FullName => "Bell.Set";
        protected ICallable<Qubit, Result> MicrosoftQuantumIntrinsicM
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        public override Func<(Result,Qubit), QVoid> Body => (__in__) =>
        {
            var (desired,q1) = __in__;
#line 9 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
            if ((desired != MicrosoftQuantumIntrinsicM.Apply(q1)))
            {
#line 10 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                MicrosoftQuantumIntrinsicX.Apply(q1);
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumIntrinsicM = this.Factory.Get<ICallable<Qubit, Result>>(typeof(Microsoft.Quantum.Intrinsic.M));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __dataIn((Result,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Result desired, Qubit q1)
        {
            return __m__.Run<Set, (Result,Qubit), QVoid>((desired, q1));
        }
    }

    [SourceLocation("/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs", OperationFunctor.Body, 66, 76)]
    public partial class SetToBellState : Operation<(Qubit,Qubit), QVoid>, ICallable
    {
        public SetToBellState(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Qubit,Qubit)>, IApplyData
        {
            public In((Qubit,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    yield return Data.Item1;
                    yield return Data.Item2;
                }
            }
        }

        String ICallable.Name => "SetToBellState";
        String ICallable.FullName => "Bell.SetToBellState";
        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        protected ICallable<Qubit, QVoid> MicrosoftQuantumIntrinsicReset
        {
            get;
            set;
        }

        public override Func<(Qubit,Qubit), QVoid> Body => (__in__) =>
        {
            var (q0,q1) = __in__;
#line 69 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
            MicrosoftQuantumIntrinsicReset.Apply(q0);
#line 70 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
            MicrosoftQuantumIntrinsicReset.Apply(q1);
#line 71 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
            MicrosoftQuantumIntrinsicH.Apply(q0);
#line 72 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
            MicrosoftQuantumIntrinsicH.Apply(q1);
#line 73 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
            MicrosoftQuantumIntrinsicCNOT.Apply((q0, q1));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
            this.MicrosoftQuantumIntrinsicReset = this.Factory.Get<ICallable<Qubit, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Reset));
        }

        public override IApplyData __dataIn((Qubit,Qubit) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Qubit q0, Qubit q1)
        {
            return __m__.Run<SetToBellState, (Qubit,Qubit), QVoid>((q0, q1));
        }
    }

    [SourceLocation("/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs", OperationFunctor.Body, 76, 99)]
    public partial class Rand3 : Operation<QVoid, Int64>, ICallable
    {
        public Rand3(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Rand3";
        String ICallable.FullName => "Bell.Rand3";
        protected ICallable<(Result,Qubit), QVoid> Set
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> MicrosoftQuantumIntrinsicM
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable<Qubit, QVoid> MicrosoftQuantumIntrinsicReset
        {
            get;
            set;
        }

        public override Func<QVoid, Int64> Body => (__in__) =>
        {
#line 78 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
            var number = 0L;
#line hidden
            {
#line 79 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                var q = Allocate.Apply();
#line hidden
                System.Runtime.ExceptionServices.ExceptionDispatchInfo __arg1__ = null;
                try
                {
#line 80 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                    while (true)
                    {
#line 84 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                        MicrosoftQuantumIntrinsicH.Apply(q);
#line 85 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                        if ((MicrosoftQuantumIntrinsicM.Apply(q) == Result.One))
                        {
#line 86 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                            number = 1L;
                        }

#line 88 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                        Set.Apply((Result.Zero, q));
#line 89 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                        MicrosoftQuantumIntrinsicH.Apply(q);
#line 90 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                        if ((MicrosoftQuantumIntrinsicM.Apply(q) == Result.One))
                        {
#line 91 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                            number = (number + 2L);
                        }

#line 93 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                        MicrosoftQuantumIntrinsicReset.Apply(q);
                        if (((number > 0L) && (number <= 3L)))
                        {
                            break;
                        }
                        else
                        {
                        }
                    }
                }
#line hidden
                catch (Exception __arg2__)
                {
                    __arg1__ = System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(__arg2__);
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__ != null)
                    {
                        __arg1__.Throw();
                    }

#line hidden
                    Release.Apply(q);
                }
            }

#line 96 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
            return number;
        }

        ;
        public override void Init()
        {
            this.Set = this.Factory.Get<ICallable<(Result,Qubit), QVoid>>(typeof(Set));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
            this.MicrosoftQuantumIntrinsicM = this.Factory.Get<ICallable<Qubit, Result>>(typeof(Microsoft.Quantum.Intrinsic.M));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicReset = this.Factory.Get<ICallable<Qubit, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Reset));
        }

        public override IApplyData __dataIn(QVoid data) => data;
        public override IApplyData __dataOut(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__)
        {
            return __m__.Run<Rand3, QVoid, Int64>(QVoid.Instance);
        }
    }

    [SourceLocation("/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs", OperationFunctor.Body, 99, -1)]
    public partial class BellTheorem : Operation<Int64, (Int64,Int64)>, ICallable
    {
        public BellTheorem(IOperationFactory m) : base(m)
        {
        }

        public class Out : QTuple<(Int64,Int64)>, IApplyData
        {
            public Out((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "BellTheorem";
        String ICallable.FullName => "Bell.BellTheorem";
        protected ICallable<QVoid, Int64> Rand3
        {
            get;
            set;
        }

        protected ICallable<(Qubit,Qubit), QVoid> SetToBellState
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> MicrosoftQuantumIntrinsicM
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable<Qubit, QVoid> MicrosoftQuantumIntrinsicReset
        {
            get;
            set;
        }

        protected IUnitary<(Double,Qubit)> MicrosoftQuantumIntrinsicRz
        {
            get;
            set;
        }

        protected ICallable<QVoid, Double> MicrosoftQuantumMathPI
        {
            get;
            set;
        }

        public override Func<Int64, (Int64,Int64)> Body => (__in__) =>
        {
            var iterations = __in__;
#line 101 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
            var totalAgree = 0L;
#line 102 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
            var totalDisagree = 0L;
#line 103 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
            foreach (var i in new QRange(1L, iterations))
#line hidden
            {
#line 104 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                var agree = 0L;
#line 105 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                var disagree = 0L;
#line hidden
                {
#line 106 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                    var (alice,bob) = (Allocate.Apply(), Allocate.Apply());
#line hidden
                    System.Runtime.ExceptionServices.ExceptionDispatchInfo __arg1__ = null;
                    try
                    {
#line 108 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                        SetToBellState.Apply((alice, bob));
#line 113 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                        var basis2 = ((MicrosoftQuantumMathPI.Apply(QVoid.Instance) * 2D) / 3D);
#line 114 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                        var basis3 = (-(1D) * basis2);
#line 115 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                        var choice = Rand3.Apply(QVoid.Instance);
#line 116 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                        if ((choice == 1L))
                        {
                        }
                        else if ((choice == 2L))
                        {
#line 119 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                            MicrosoftQuantumIntrinsicRz.Apply((basis2, alice));
                        }
                        else if ((choice == 3L))
                        {
#line 121 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                            MicrosoftQuantumIntrinsicRz.Apply((basis3, alice));
                        }

#line 125 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                        var bChoice = Rand3.Apply(QVoid.Instance);
#line 126 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                        if ((bChoice == 1L))
                        {
                        }
                        else if ((bChoice == 2L))
                        {
#line 129 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                            MicrosoftQuantumIntrinsicRz.Apply((basis2, bob));
                        }
                        else if ((bChoice == 3L))
                        {
#line 131 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                            MicrosoftQuantumIntrinsicRz.Apply((basis3, bob));
                        }

#line 135 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                        var a = MicrosoftQuantumIntrinsicM.Apply(alice);
#line 136 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                        var b = MicrosoftQuantumIntrinsicM.Apply(bob);
#line 139 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                        if (((a == Result.Zero) && (b == Result.Zero)))
                        {
#line 140 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                            agree = (agree + 1L);
                        }
                        else if (((a == Result.Zero) && (b == Result.One)))
                        {
#line 142 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                            disagree = (disagree + 1L);
                        }
                        else if (((a == Result.One) && (b == Result.Zero)))
                        {
#line 144 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                            disagree = (disagree + 1L);
                        }
                        else if (((a == Result.One) && (b == Result.One)))
                        {
#line 146 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                            agree = (agree + 1L);
                        }

#line 150 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                        MicrosoftQuantumIntrinsicReset.Apply(alice);
#line 151 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                        MicrosoftQuantumIntrinsicReset.Apply(bob);
                    }
#line hidden
                    catch (Exception __arg2__)
                    {
                        __arg1__ = System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(__arg2__);
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__ != null)
                        {
                            __arg1__.Throw();
                        }

#line hidden
                        Release.Apply(alice);
#line hidden
                        Release.Apply(bob);
                    }
                }

#line 153 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                totalAgree = (totalAgree + agree);
#line 154 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
                totalDisagree = (totalDisagree + disagree);
            }

#line 157 "/Users/ericglover/Desktop/Programming/quantumComputing/Bell/Bell.qs"
            return (totalAgree, totalDisagree);
        }

        ;
        public override void Init()
        {
            this.Rand3 = this.Factory.Get<ICallable<QVoid, Int64>>(typeof(Rand3));
            this.SetToBellState = this.Factory.Get<ICallable<(Qubit,Qubit), QVoid>>(typeof(SetToBellState));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.MicrosoftQuantumIntrinsicM = this.Factory.Get<ICallable<Qubit, Result>>(typeof(Microsoft.Quantum.Intrinsic.M));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicReset = this.Factory.Get<ICallable<Qubit, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Reset));
            this.MicrosoftQuantumIntrinsicRz = this.Factory.Get<IUnitary<(Double,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.Rz));
            this.MicrosoftQuantumMathPI = this.Factory.Get<ICallable<QVoid, Double>>(typeof(Microsoft.Quantum.Math.PI));
        }

        public override IApplyData __dataIn(Int64 data) => new QTuple<Int64>(data);
        public override IApplyData __dataOut((Int64,Int64) data) => new Out(data);
        public static System.Threading.Tasks.Task<(Int64,Int64)> Run(IOperationFactory __m__, Int64 iterations)
        {
            return __m__.Run<BellTheorem, Int64, (Int64,Int64)>(iterations);
        }
    }
}